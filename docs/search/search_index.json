{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sponsored Stacks transactions Transactions can be either signed by the user as a standard transaction or as a sponsored transactions. Sponsored transactions are only accepted by the Stacks blockchain when the transaction is additionally signed by the a second user, the sponsor. The sponsor pays for the transaction fees. Use cases The sponsored transactions are used for the following use cases: Send $NOT to many users Block hacked user account Minting NFTs In-Depth For more details see In-Depth for users In-Depth for developers Support This project is kindly supported by the DeGrants Program .","title":"Sponsored Stacks transactions"},{"location":"#sponsored-stacks-transactions","text":"Transactions can be either signed by the user as a standard transaction or as a sponsored transactions. Sponsored transactions are only accepted by the Stacks blockchain when the transaction is additionally signed by the a second user, the sponsor. The sponsor pays for the transaction fees.","title":"Sponsored Stacks transactions"},{"location":"#use-cases","text":"The sponsored transactions are used for the following use cases: Send $NOT to many users Block hacked user account Minting NFTs","title":"Use cases"},{"location":"#in-depth","text":"For more details see In-Depth for users In-Depth for developers","title":"In-Depth"},{"location":"#support","text":"This project is kindly supported by the DeGrants Program .","title":"Support"},{"location":"block/","text":"Block hacked account Sponsored transactions have been seen in the wild to block a hacked account from doing any further transactions. This is possible due to the dependency between user and sponsor. When a third party has access to the private key of the user's account, the user can try to block their own account. The user can initiate a sponsored transaction and the sponsoring account can set a nonce for the sponsor with a gap. This prevents that the transaction is confirmed by the network. The user account cannot send any transactions anymore. The third party could try to replace the transaction by higher fees. However, the sponsor can do the same. The difference is that the sponsor can get back their fees when the transaction in mempool expires after around 2 days.","title":"Block hacked account"},{"location":"block/#block-hacked-account","text":"Sponsored transactions have been seen in the wild to block a hacked account from doing any further transactions. This is possible due to the dependency between user and sponsor. When a third party has access to the private key of the user's account, the user can try to block their own account. The user can initiate a sponsored transaction and the sponsoring account can set a nonce for the sponsor with a gap. This prevents that the transaction is confirmed by the network. The user account cannot send any transactions anymore. The third party could try to replace the transaction by higher fees. However, the sponsor can do the same. The difference is that the sponsor can get back their fees when the transaction in mempool expires after around 2 days.","title":"Block hacked account"},{"location":"in-depth-developers/","text":"In-Depth: Sponsored Transactions for Developers Sponsored transactions were added to the Stacks blockchain to enable developers and/or infrastructure operators to pay for users to call into their smart contracts, even if users do not hold STX to pay for fees. (See SIP-005 ). The process consists of two steps: 1) signing by user and 2) signing by sponsor Signing Transaction by User Sponsored transactions are build in the same way as normal transactions. The only difference is that fees are set to 0 and the sponsored flag is set to true. The sponsored transaction is then send to the user's wallet for confirmation. The wallet can't broadcast the transaction, instead it is returned to the app and needs to be handled separately. An example with @stacks/connect library looks like the following (see also send-many example ): const txOptions = {...}; txOptions.fee = 0; txOptions.sponsored = true; openContractCall({...txOptions, onFinish: (finishedTxData) => handleSignedSponsoredTransaction(finishTxData) } ) Signing Transaction by Sponsor The signed transaction is returned from the wallet as part of the finished transaction data. The authentication type of the transaction will be of type Sponsored data.stacksTransaction.auth.authType === AuthType.Sponsored; The serialized transaction ( data.txRaw ) can then be sent to a server for signing by the sponsor. There, the sponsor sets the fee for the transaction, add the sponsor's nonce and signs the transaction with the private key. An example using the javascript library @stacks/transactions on a server looks like the following (see also not-sponsoring example ): import {deserializeTransaction, sponsorTransaction} from '@stacks/transactions'; ... const transaction = deserializeTransaction(txRaw); const feeEstimate = await estimateTransactionFeeWithFallback(transaction, network); const sponsorNonce = nonce; // next nonce of sponsor account const sponsoredTx = await sponsorTransaction({ sponsorPrivateKey: env.SPONSOR_PRIVATE_KEY, transaction, network, fee, sponsorNonce: nonce, }); const result = await broadcastTransaction(sponsoredTx);","title":"In-Depth: Sponsored Transactions for Developers"},{"location":"in-depth-developers/#in-depth-sponsored-transactions-for-developers","text":"Sponsored transactions were added to the Stacks blockchain to enable developers and/or infrastructure operators to pay for users to call into their smart contracts, even if users do not hold STX to pay for fees. (See SIP-005 ). The process consists of two steps: 1) signing by user and 2) signing by sponsor","title":"In-Depth: Sponsored Transactions for Developers"},{"location":"in-depth-developers/#signing-transaction-by-user","text":"Sponsored transactions are build in the same way as normal transactions. The only difference is that fees are set to 0 and the sponsored flag is set to true. The sponsored transaction is then send to the user's wallet for confirmation. The wallet can't broadcast the transaction, instead it is returned to the app and needs to be handled separately. An example with @stacks/connect library looks like the following (see also send-many example ): const txOptions = {...}; txOptions.fee = 0; txOptions.sponsored = true; openContractCall({...txOptions, onFinish: (finishedTxData) => handleSignedSponsoredTransaction(finishTxData) } )","title":"Signing Transaction by User"},{"location":"in-depth-developers/#signing-transaction-by-sponsor","text":"The signed transaction is returned from the wallet as part of the finished transaction data. The authentication type of the transaction will be of type Sponsored data.stacksTransaction.auth.authType === AuthType.Sponsored; The serialized transaction ( data.txRaw ) can then be sent to a server for signing by the sponsor. There, the sponsor sets the fee for the transaction, add the sponsor's nonce and signs the transaction with the private key. An example using the javascript library @stacks/transactions on a server looks like the following (see also not-sponsoring example ): import {deserializeTransaction, sponsorTransaction} from '@stacks/transactions'; ... const transaction = deserializeTransaction(txRaw); const feeEstimate = await estimateTransactionFeeWithFallback(transaction, network); const sponsorNonce = nonce; // next nonce of sponsor account const sponsoredTx = await sponsorTransaction({ sponsorPrivateKey: env.SPONSOR_PRIVATE_KEY, transaction, network, fee, sponsorNonce: nonce, }); const result = await broadcastTransaction(sponsoredTx);","title":"Signing Transaction by Sponsor"},{"location":"in-depth-users/","text":"In-Depth: Sponsored Transactions for Users Sponsored transactions are defined in SIP-005 . The specification says that the user needs to sign the transaction first and the sponsor second. User flow Practically, the user visits an website (or dapp), connects the Stacks wallet and then initializes a transaction. The wallet shows the transactions as usual with post-conditions etc. However, the fees will be 0 STX for the user. Leather web extension (version v6.51.1) show 0 STX fees and an information text like this: The wallet sends the signed transaction back to the website. The signed transaction can now be forwarded to a signing service or an other user who sponsors the transaction. Currently, no Stacks wallet supports signing transactions as a sponsor. Instead, the developers of the website needs to take care of it. Benefits and Risks On one hand, sponsored transactions simplify the interaction with websites or apps that do not require the use of STX directly. Furthermore, users do not have to evaluate the current fee market and decide on the fees. On the other hand, sponsored transactions create a dependency between user and sponsor. If the sponsor fails to sign and broadcast the transaction correctly, the user's transaction is not confirmed until the sponsor resolves the issue. A bad acting sponsor can even block the user's wallet. See Block Hacked Accounts .","title":"In-Depth: Sponsored Transactions for Users"},{"location":"in-depth-users/#in-depth-sponsored-transactions-for-users","text":"Sponsored transactions are defined in SIP-005 . The specification says that the user needs to sign the transaction first and the sponsor second.","title":"In-Depth: Sponsored Transactions for Users"},{"location":"in-depth-users/#user-flow","text":"Practically, the user visits an website (or dapp), connects the Stacks wallet and then initializes a transaction. The wallet shows the transactions as usual with post-conditions etc. However, the fees will be 0 STX for the user. Leather web extension (version v6.51.1) show 0 STX fees and an information text like this: The wallet sends the signed transaction back to the website. The signed transaction can now be forwarded to a signing service or an other user who sponsors the transaction. Currently, no Stacks wallet supports signing transactions as a sponsor. Instead, the developers of the website needs to take care of it.","title":"User flow"},{"location":"in-depth-users/#benefits-and-risks","text":"On one hand, sponsored transactions simplify the interaction with websites or apps that do not require the use of STX directly. Furthermore, users do not have to evaluate the current fee market and decide on the fees. On the other hand, sponsored transactions create a dependency between user and sponsor. If the sponsor fails to sign and broadcast the transaction correctly, the user's transaction is not confirmed until the sponsor resolves the issue. A bad acting sponsor can even block the user's wallet. See Block Hacked Accounts .","title":"Benefits and Risks"},{"location":"minting-nfts/","text":"Minting NFTs A sponsoring service for minting NFTs is currently under development. It will demonstrate how project can help onboarding new users that do not have STX. More details will be published here once the service is completed.","title":"Minting NFTs"},{"location":"minting-nfts/#minting-nfts","text":"A sponsoring service for minting NFTs is currently under development. It will demonstrate how project can help onboarding new users that do not have STX. More details will be published here once the service is completed.","title":"Minting NFTs"},{"location":"send-many/","text":"Send $NOTHING to many users The website sendstx.com helps users to send STX and other tokens to many users with a single transaction. The site uses sponsored transactions. When sending $NOT tokens users can choose to pay transactions fees in $NOT. (They pay nothing). sendstx.com Explanation When the user chooses to pay in $NOT the sponsor address is added as a recipient of the send-many transaction. The amount is currently fixed and should be equivalent to the transactions fees in STX. The transaction is signed by the user as a sponsored transaction using Leather wallet (or other supported wallets). The returned signed transaction is send to the tx2.app server. The server verifies the transactions. If the transaction is eligable for sponsoring, the server account signs the transaction as sponsor with the keys of the sponsor address and then broadcasts the transaction. The following criteria are implemented for eligable sponsoring: must be a sponsored transaction must be a send-many transaction for $NOT must contain the sponsor address as recipient must send at least 1k $NOT to the sponsor The source code is available at github.com/friedger/stacks-not-sponsoring .","title":"Send $NOTHING to many users"},{"location":"send-many/#send-nothing-to-many-users","text":"The website sendstx.com helps users to send STX and other tokens to many users with a single transaction. The site uses sponsored transactions. When sending $NOT tokens users can choose to pay transactions fees in $NOT. (They pay nothing).","title":"Send $NOTHING to many users"},{"location":"send-many/#sendstxcom","text":"","title":"sendstx.com"},{"location":"send-many/#explanation","text":"When the user chooses to pay in $NOT the sponsor address is added as a recipient of the send-many transaction. The amount is currently fixed and should be equivalent to the transactions fees in STX. The transaction is signed by the user as a sponsored transaction using Leather wallet (or other supported wallets). The returned signed transaction is send to the tx2.app server. The server verifies the transactions. If the transaction is eligable for sponsoring, the server account signs the transaction as sponsor with the keys of the sponsor address and then broadcasts the transaction. The following criteria are implemented for eligable sponsoring: must be a sponsored transaction must be a send-many transaction for $NOT must contain the sponsor address as recipient must send at least 1k $NOT to the sponsor The source code is available at github.com/friedger/stacks-not-sponsoring .","title":"Explanation"}]}